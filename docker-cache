#!/bin/bash

set -euo pipefail

# This was adapted from the docker-cache tool on Semaphore CI

destination="${DOCKER_CACHE_DIR:-/tmp/docker-cache}"
image_archive="docker-image-archive.tar"
cached_image_archive_path="$destination/$image_archive"

cache_images() {
	images_to_cache="$(docker images | awk '{print $1, "|", $3, "|", $7$8}' | grep -v '<none>' | tail -n +2)"
	image_ids=( $(echo "$images_to_cache" | cut -d \| -f 2 | xargs -n1 docker history -q | grep -v '<missing>' | sort | uniq) )

	if [[ $images_to_cache ]]; then

    printf "Saving the following images:\n$images_to_cache\n\n"
    docker save -o "/tmp/$image_archive" "${image_ids[@]}"

    mv "/tmp/$image_archive" "$cached_image_archive_path"
    echo "Images saved to $cached_image_archive_path"

    echo "Done."
  else
    echo "No images found."
  fi
}

restore_images() {
  if [[ -f $cached_image_archive_path ]]; then
    echo "Restoring images ..."
    docker load < "$cached_image_archive_path"
    echo "Images restored."
    docker images
  else
   echo "No image backup found. Please use the 'snapshot' action to create one."
  fi
}

usage() {
	echo "Usage: docker-cache <save|load>"
	exit 1
}

main() {
	cmd="${1:-}"
	[[ $cmd ]] || usage

	if [[ -e $destination && ! -d $destination ]]; then
			echo "ERROR: destination $destination exists and is not a directory!"
			exit 1
	else
			mkdir -p "$destination"
	fi

	case "$cmd" in
    "save" )
      cache_images
      ;;
    "load" )
      restore_images
      ;;
    * )
      echo "'$1' action unknown"
			usage
      ;;
  esac
}

main "${@:-}"
